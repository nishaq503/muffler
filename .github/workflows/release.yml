name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build and test before release
  test:
    name: Test before release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup development environment
        uses: ./.github/actions/setup-dev-env
        with:
          rust-components: 'rustfmt,clippy'
          cache-key-suffix: 'release-test'

      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest

      - name: Run all checks
        run: |
          # Format check
          cargo fmt --all -- --check
          uv run ruff format --check
          uv run isort --check-only .

          # Lint check
          cargo clippy --all-targets --all-features -- -D warnings
          uv run ruff check
          uv run mypy --strict --pretty .

          # Tests
          cargo nextest run --release --all-targets --all-features
          for dir in $(find . -name pyproject.toml -not -path "./pyproject.toml" -exec dirname {} \;); do
            echo "Running tests in $dir"
            cd "$dir" && uv run pytest ./**/*.py
            cd - > /dev/null
          done

  # Build release artifacts
  build-release:
    name: Build Release
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create release archive
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            asset_name="muffler-${{ matrix.target }}.zip"
            7z a "$asset_name" ./target/${{ matrix.target }}/release/muffler.exe
          else
            asset_name="muffler-${{ matrix.target }}.tar.gz"
            tar -czf "$asset_name" -C ./target/${{ matrix.target }}/release muffler
          fi
          echo "ASSET_NAME=$asset_name" >> $GITHUB_ENV

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_NAME }}

  # Create GitHub release
  release:
    name: Create Release
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
